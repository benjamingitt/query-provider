"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.setLoggerEnabled = exports.setErrorLogger = exports.setSuccessLogger = exports.defaultErrorLogger = exports.defaultSuccessLogger = void 0;

var defaultSuccessLogger = function defaultSuccessLogger(message) {
  var logger = console.info ? console.info : console.log;
  logger(message);
};

exports.defaultSuccessLogger = defaultSuccessLogger;

var defaultErrorLogger = function defaultErrorLogger(message) {
  var logger = console.error ? console.error : console.log;
  logger(message);
};

exports.defaultErrorLogger = defaultErrorLogger;
var isLoggerEnabled = console && console.log;
var successLogger = defaultSuccessLogger;
var errorLogger = defaultErrorLogger;

var setSuccessLogger = function setSuccessLogger(logger) {
  successLogger = logger;
};

exports.setSuccessLogger = setSuccessLogger;

var setErrorLogger = function setErrorLogger(logger) {
  errorLogger = logger;
};

exports.setErrorLogger = setErrorLogger;

var setLoggerEnabled = function setLoggerEnabled(value) {
  isLoggerEnabled = value;
};

exports.setLoggerEnabled = setLoggerEnabled;

var log = function log(request, response) {
  if (isLoggerEnabled) {
    var httpCall = "".concat(request.method().toUpperCase(), " ").concat(request.url());
    var direction = response ? '<-' : '->';
    var isError = response && !response.success();
    var errorLabel = isError ? '(ERROR) ' : '';
    var extra = response ? " status=".concat(response.status(), " '").concat(response.rawData(), "'") : '';
    var logger = isError ? errorLogger : successLogger;
    logger("".concat(direction, " ").concat(errorLabel).concat(httpCall).concat(extra));
  }

  return response || request;
};
/**
 * Log all requests and responses.
 */


var ConsoleLogMiddleware = function ConsoleLogMiddleware() {
  return {
    prepareRequest: function prepareRequest(next) {
      return next().then(function (request) {
        return log(request);
      });
    },
    response: function response(next) {
      return next().then(function (response) {
        return log(response.request(), response);
      }).catch(function (response) {
        log(response.request(), response);
        throw response;
      });
    }
  };
};

var _default = ConsoleLogMiddleware;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _manifest = _interopRequireDefault(require("./manifest"));

var _request = _interopRequireDefault(require("./request"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @typedef ClientBuilder
 * @param {Object} manifest - manifest definition with at least the `resources` key
 * @param {Function} GatewayClassFactory - factory function that returns a gateway class
 */
function ClientBuilder(manifest, GatewayClassFactory, configs) {
  if (!manifest) {
    throw new Error("[Mappersmith] invalid manifest (".concat(manifest, ")"));
  }

  if (!GatewayClassFactory || !GatewayClassFactory()) {
    throw new Error('[Mappersmith] gateway class not configured (configs.gateway)');
  }

  this.Promise = configs.Promise;
  this.manifest = new _manifest.default(manifest, configs);
  this.GatewayClassFactory = GatewayClassFactory;
  this.maxMiddlewareStackExecutionAllowed = configs.maxMiddlewareStackExecutionAllowed;
}

ClientBuilder.prototype = {
  build: function build() {
    var _this = this;

    var client = {
      _manifest: this.manifest
    };
    this.manifest.eachResource(function (name, methods) {
      client[name] = _this.buildResource(name, methods);
    });
    return client;
  },
  buildResource: function buildResource(resourceName, methods) {
    var _this2 = this;

    return methods.reduce(function (resource, method) {
      return (0, _utils.assign)(resource, _defineProperty({}, method.name, function (requestParams) {
        var request = new _request.default(method.descriptor, requestParams);
        return _this2.invokeMiddlewares(resourceName, method.name, request);
      }));
    }, {});
  },
  invokeMiddlewares: function invokeMiddlewares(resourceName, resourceMethod, initialRequest) {
    var _this3 = this;

    var middleware = this.manifest.createMiddleware({
      resourceName: resourceName,
      resourceMethod: resourceMethod
    });
    var GatewayClass = this.GatewayClassFactory();
    var gatewayConfigs = this.manifest.gatewayConfigs;
    var requestPhaseFailureContext = {
      middleware: null,
      returnedInvalidRequest: false,
      abortExecution: false
    };

    var getInitialRequest = function getInitialRequest() {
      return _this3.Promise.resolve(initialRequest);
    };

    var chainRequestPhase = function chainRequestPhase(next, middleware) {
      return function () {
        var abort = function abort(error) {
          requestPhaseFailureContext.abortExecution = true;
          throw error;
        };

        return _this3.Promise.resolve().then(function () {
          return middleware.prepareRequest(next, abort);
        }).then(function (request) {
          if (request instanceof _request.default) {
            return request;
          }

          requestPhaseFailureContext.returnedInvalidRequest = true;

          var typeValue = _typeof(request);

          var prettyType = typeValue === 'object' || typeValue === 'function' ? request.name || typeValue : typeValue;
          throw new Error("[Mappersmith] middleware \"".concat(middleware.__name, "\" should return \"Request\" but returned \"").concat(prettyType, "\""));
        }).catch(function (e) {
          requestPhaseFailureContext.middleware = middleware.__name;
          throw e;
        });
      };
    };

    var prepareRequest = middleware.reduce(chainRequestPhase, getInitialRequest);
    var executions = 0;

    var executeMiddlewareStack = function executeMiddlewareStack() {
      return prepareRequest().catch(function (e) {
        var returnedInvalidRequest = requestPhaseFailureContext.returnedInvalidRequest,
            abortExecution = requestPhaseFailureContext.abortExecution,
            middleware = requestPhaseFailureContext.middleware;

        if (returnedInvalidRequest || abortExecution) {
          throw e;
        }

        var error = new Error("[Mappersmith] middleware \"".concat(middleware, "\" failed in the request phase: ").concat(e.message));
        error.stack = e.stack;
        throw error;
      }).then(function (finalRequest) {
        executions++;

        if (executions > _this3.maxMiddlewareStackExecutionAllowed) {
          throw new Error("[Mappersmith] infinite loop detected (middleware stack invoked ".concat(executions, " times). Check the use of \"renew\" in one of the middleware."));
        }

        var renew = executeMiddlewareStack;

        var chainResponsePhase = function chainResponsePhase(next, middleware) {
          return function () {
            return middleware.response(next, renew);
          };
        };

        var callGateway = function callGateway() {
          return new GatewayClass(finalRequest, gatewayConfigs).call();
        };

        var execute = middleware.reduce(chainResponsePhase, callGateway);
        return execute();
      });
    };

    return new this.Promise(function (resolve, reject) {
      executeMiddlewareStack().then(function (response) {
        return resolve(response);
      }).catch(reject);
    });
  }
};
var _default = ClientBuilder;
exports.default = _default;